#ifndef ZIP_CRACK_H
#define ZIP_CRACK_H

#include <stdint.h>
#include <iostream>
#include "crc32.h"
#include "zip_read.h"
#include "generators.h"


class PasswordCollectorInterface
{
public:
    virtual void collect(const StaticVector<char, MAX_PW_LEN>  password) = 0;
};


/* Just print to stdout */
class PasswordCollectorPrint : public PasswordCollectorInterface
{
public:
    virtual void collect(const StaticVector<char, MAX_PW_LEN> password) {
        #pragma omp critical
        {
            for (uint32_t i = 0;  i < password.size(); i++) {
                std::cout << password[i];
            }
            std::cout << "\n";
        }
    }
};


class DecodeCheckerInterface
{
public:
    /*
     * Returns true iff the 12 decoded bytes look reasonable, i.e. if it the password MAY be correct.
     */
    virtual bool check(const file_info_type&          file,
                       const StaticVector<uint8_t, FILE_READ_SIZE>&  decode) const = 0;
};


class DecodeChecker : public DecodeCheckerInterface
{
private:
    StaticVector<bool, 65536> is_quadratic_residue;

public:
    DecodeChecker(bool check_quadratic_residues=false);
    bool check(const file_info_type&             file,
               const StaticVector<uint8_t, FILE_READ_SIZE>&  decode) const;
    float false_positive_rate() const;
};


/*
 * This function examines candidate passwords generated by generator_fn and rules out most of them
 * using knowledge of zip file structure.
 */
void
crack_zip_password (const std::vector<file_info_type>  &files,
                    GeneratorInterface               &generator,
                    DecodeCheckerInterface           &checker,
                    PasswordCollectorInterface       &collector);


#endif /* ZIP_CRACK_H */
